"""
TEST PARTIAL DIFFERENTIAL EQUATION resoltuion using PINN
Dynamics
from: Non-equilibrium theory of the allele frequency spectrum
Theoretical Population Biology 71 (2007) 109–119
"""
using NeuralPDE
using ModelingToolkit
using Optimization
using DiffEqFlux
using Quadrature
using Lux
using OptimizationOptimJL
using Cubature
import ModelingToolkit: Interval, infimum, supremum

@parameters t,x
@variables g(..)
Dt = Differential(t)
Dxx = Differential(x) ^ 2
Dx = Differential(x)
# Parameters
s = 2
α = 1.0
max_t = 10.0

### DYNAMICS WITH EXPON
eqs = Dt(g(t,x)) ~  - 1 * s * x * (1 - x ) * Dx(g(t,x)) + ((x *(1-x)) /( 2 * exp(α * t)) ) *  Dxx(g(t,x))

# Boundary conditions equilibrium condition of afs
##  points where the inital condition is evaluated
array_of_x = [0.0:0.01:1;]

#### EQUILIBRIUM BCS
if s > 0
    bcs = [g(0,array_of_x[k]) ~ (exp(2 * s) * (1 - exp( - 2 * s * (1 - array_of_x[k] )))) / (exp(2 * s) - 1) for k in 1:length(array_of_x) ]

end

if s == 0
    bcs = [g(0,array_of_x[k]) ~ 1-array_of_x[k] for k in 1:length(array_of_x) ]

end


# VF and time domains
domains = [t ∈ Interval(0.0,max_t) , x ∈ Interval(0.0,1.0)]
# setting symbolic problem of optimization on a discretization

@named pde_system = PDESystem(eqs,bcs,domains,[t,x],[g(t,x)])


# Neural network
##input layer the same dimension of the problem
input_  = length(domains)
# neurons per internal layer
chain = Lux.Chain(Lux.Dense(input_,16,Lux.σ),Lux.Dense(16,16,Lux.σ),Lux.Dense(16,1))

initθ = map(c -> Float64.(c), Lux.initial_params.(chain))

dx = 0.05
_strategy = GridTraining(dx)

discretization = PhysicsInformedNN(chain, _strategy)


prob = discretize(pde_system , discretization)

##


###
callback = function (p,l)
    println("Current loss is: $l")
    return false
end
# selecting optimizer
# starting optimization with ADAM
res = Optimization.solve(prob, Adam(10^-3); callback = callback, maxiters=300)
# second  optimization with BFGS

prob = remake(prob, u0 = res.minimizer)

opt = OptimizationOptimJL.BFGS()

res = solve(prob,opt; callback = callback, maxiters=500)

# taking solutions

phi = discretization.phi


# solutions plots

using Plots
using DelimitedFiles

dplot = [0.1, 0.05]
ts = 0.0 : dplot[1] : max_t
xs = 0.0 : dplot[2] : 1.0
acum =  [0;accumulate(+, length(res.minimizer))]
sep = [acum[i]+1 : acum[i+1] for i in 1:length(acum)-1]
minimizers_ = [res.minimizer[s] for s in sep]

#for t ∈ ts
#    f_predict  = [[ first(phi([t,x],res.u)) / ( x * ( 1 - x ))    for x in xs] for i in 1:1]
#    writedlm("test_$t.txt", f_predict," ")
#end

### GENERATION OF GIF
anim = @animate for t ∈ ts
    @info "Time $t..."
    sol_p = [ first(phi([t,x],res.u)) / ( x * ( 1 - x ))    for x in xs]
    title= t
    plot!(xs,sol_p,title=title , legend = false)
end
gif(anim, "test_vf.gif", fps=200)

)

length(res.minimizer)


 phi[1]([t,x] , minimizers_[1])[1]



reshape([first(phi([t,x],res.u)) for x in xs for t in ts],(length(ts),length(xs)))

first(phi([x,y],res.minimizer)

res.u
res
[first(phi([t,x],res.u)) for x in xs for t in ts]
